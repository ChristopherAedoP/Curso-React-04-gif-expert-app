{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGrid.js","gifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","id","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","images","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGrid","key","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"6MAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EAEbC,mBAAS,IAFI,mBAE1CC,EAF0C,KAE9BC,EAF8B,KAgBjD,OACC,0BAAMC,SATc,SAACC,GACrBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAmBO,OACrCN,EAAc,OAMd,2BACCO,KAAK,OACLC,MAAQT,EACRU,SAjBuB,SAACP,GAC1BF,EAAcE,EAAEQ,OAAOF,YCQVG,EAbK,SAAC,GAAuB,EAArBC,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOC,EAAU,EAAVA,IAChC,OACE,yBAAKC,UAAU,0CACb,yBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,2BAAIA,K,uBCPGK,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DAEhBN,EAFgB,iDAEiCO,UAAUF,GAF3C,+DAGHG,MAAMR,GAHH,cAGhBS,EAHgB,gBAKDA,EAAKC,OALJ,uBAKfC,EALe,EAKfA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC7B,MAAO,CACNhB,GAAIgB,EAAIhB,GACRC,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIC,cAAN,aAAE,EAAYC,iBAAiBhB,QAXd,kBAgBfY,GAhBe,4CAAH,sDC4BLK,EAxBM,SAAEZ,GAAe,IAAD,EACVrB,mBAAS,CAClC2B,KAAM,GACNO,SAAS,IAH0B,mBAC7BC,EAD6B,KACtBC,EADsB,KAgBpC,OAVAC,qBAAU,WACTjB,EAASC,GACPiB,MAAK,SAAAC,GACLH,EAAS,CACRT,KAAMY,EACNL,SAAS,SAGV,CAACb,IAEGc,GCaOK,EA5BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,EAEAY,EAAaZ,GAAjCU,EAFoB,EAEzBJ,KAAaO,EAFY,EAEZA,QAErB,OACC,oCACC,wBAAIjB,UAAU,qCAAd,IAAqDI,EAArD,KAECa,GAAW,uBAAGjB,UAAU,oCAAb,aAEZ,yBAAKA,UAAU,aAEZc,EAAOF,KAAI,SAAAC,GAAG,OACb,kBAAC,EAAD,eACCW,IAAMX,EAAIhB,IACLgB,UCUEY,EA1BM,WAAO,IAAD,EAEU1C,mBAAS,CAAC,cAFpB,mBAEnB2C,EAFmB,KAEP5C,EAFO,KAI1B,OACC,oCAEA,oCAGA,kBAAC,EAAD,CACCA,cAAiBA,IAGlB,6BACA,4BAEE4C,EAAWd,KAAI,SAAAR,GAAQ,OACtB,kBAAC,EAAD,CAASA,SAAYA,EAAYoB,IAAQpB,UCf9CuB,IAASC,OACH,kBAAC,EAAD,MACFC,SAASC,eAAe,U","file":"static/js/main.af213953.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategories }) => {\r\n\r\n\tconst [inputValue, setInputValue] = useState('');\r\n\r\n\tconst handleInputChange = (e) => {\r\n\t\tsetInputValue(e.target.value);\r\n\t}\r\n\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tif (inputValue.trim().length > 2) {\r\n\t\t\tsetCategories(cats => [inputValue,...cats ]);\r\n\t\t\tsetInputValue('');\r\n\t\t}\r\n\t}\r\n\r\n\treturn (\r\n\t\t<form onSubmit= { handleSubmit }>\r\n\t\t\t<input\r\n\t\t\t\ttype=\"text\"\r\n\t\t\t\tvalue={ inputValue } \r\n\t\t\t\tonChange= { handleInputChange }\r\n\t\t\t/>\r\n\t\t</form>\r\n\t)\r\n}\r\n\r\n\r\nAddCategory.propTypes = {\r\n\tsetCategories: PropTypes.func.isRequired\r\n}","import React from 'react';\r\n//import PropTypes from 'prop-types'\r\n\r\nconst GifGridItem = ({ id, title, url }) => {\r\n  return (\r\n    <div className='card animate__animated animate__fadeIn'>\r\n      <img src={url} alt={title} />\r\n      <p>{title}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// GifGridItem.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifGridItem;\r\n","export const getGifs = async ( category ) => {\r\n\r\n\tconst url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=aMndBbN3cNFOonDloZ6nb01DnMvKc7wK`;\r\n\tconst resp = await fetch(url);\r\n\r\n\tconst {data} = await resp.json();\r\n\r\n\tconst gifs = data.map( img => {\r\n\t\treturn {\r\n\t\t\tid: img.id,\r\n\t\t\ttitle: img.title,\r\n\t\t\turl: img.images?.downsized_medium.url\r\n\t\t};\r\n\t});\r\n\r\n\t\r\n\treturn gifs;\r\n\r\n}","import { useState ,useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs'\r\n//import PropTypes from 'prop-types'\r\n\r\nconst useFetchGifs = ( category ) => {\r\n\tconst [state, setState] = useState({\r\n\t\tdata: [],\r\n\t\tloading: true\r\n\t})\r\n\r\n\tuseEffect(() => {\r\n\t\tgetGifs( category )\r\n\t\t\t.then(imgs => {\r\n\t\t\t\tsetState({\r\n\t\t\t\t\tdata: imgs,\r\n\t\t\t\t\tloading: false\r\n\t\t\t\t})\r\n\t\t\t})\r\n\t}, [category])\r\n\r\n\treturn state;\r\n\r\n}\r\n\r\n// useFetchGifs.propTypes = {\r\n\r\n// }\r\n\r\nexport default useFetchGifs\r\n","import React from 'react'\r\nimport GifGridItem from './GifGridItem';\r\nimport useFetchGifs from '../hooks/useFetchGifs';\r\n//import PropTypes from 'prop-types'\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n\tconst { data:images, loading } = useFetchGifs(category); \r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3 className=\"animate__animated animate__fadeIn\"> { category } </h3>\r\n\r\n\t\t\t{loading && <p className=\"animate__animated animate__pulse\">loading..</p>}\r\n\t\t\t\r\n\t\t\t<div className=\"card-grid\">\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\timages.map(img => (\r\n\t\t\t\t\t\t\t<GifGridItem \r\n\t\t\t\t\t\t\t\tkey= {img.id}\r\n\t\t\t\t\t\t\t\t{ ...img } \r\n\t\t\t\t\t\t\t/>\t\r\n\t\t\t\t\t\t))\r\n\t\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\n// GifGrid.propTypes = {\r\n\r\n// }\r\n\r\nexport default GifGrid\r\n","import React , {useState} from 'react'\r\nimport  {AddCategory}  from './components/AddCategory'\r\nimport GifGrid from './components/GifGrid'\r\n\r\nconst GifExpertApp = () => {\r\n\r\n\tconst [categories, setCategories] = useState(['One Punch'])\r\n\r\n\treturn (\r\n\t <>\r\n\t\t\r\n\t\t<h2>Gifs</h2>\r\n\t\t\r\n\r\n\t\t<AddCategory \r\n\t\t\tsetCategories= { setCategories }\r\n\t\t/>\r\n\r\n\t\t<hr></hr>\r\n\t\t<ol>\r\n\t\t\t{\r\n\t\t\t\tcategories.map(category => \r\n\t\t\t\t <GifGrid category= { category }  key = { category } />\r\n\t\t\t\t)\r\n\t\t\t}\r\n\t\t</ol>\r\n\t </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './gifExpertApp';\n\n\n\nReactDOM.render(\n      <GifExpertApp />,\n    document.getElementById('root')\n\n);\n\n"],"sourceRoot":""}